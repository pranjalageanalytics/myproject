# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-01-11 08:31
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=70)),
                ('category_image', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'category_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryLocationRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'category_location_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryType',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=70)),
                ('category_image', models.ImageField(blank=True, null=True, upload_to=b'')),
            ],
            options={
                'db_table': 'category_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChallengeCreatorRankingRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'challenge_creator_ranking_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChallengeType',
            fields=[
                ('challenge_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=70, null=True)),
                ('photo', models.CharField(blank=True, max_length=500, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('post_date', models.DateTimeField(default=datetime.datetime(2017, 1, 11, 8, 31, 31, 2000, tzinfo=utc))),
                ('end_date', models.DateField(blank=True, null=True)),
                ('venue', models.CharField(blank=True, max_length=500, null=True)),
                ('direction', models.CharField(blank=True, max_length=1000, null=True)),
                ('contact_no', models.CharField(blank=True, max_length=15, null=True)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('reg_expire_date', models.DateField(blank=True, null=True)),
                ('commited_volunteers', models.IntegerField(blank=True, null=True)),
                ('requested_volunteers', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=45, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('decline_volunteers', models.IntegerField(blank=True, null=True)),
                ('tentative_volunteers', models.IntegerField(blank=True, null=True)),
                ('accepted_volenteers_by_host', models.IntegerField(blank=True, null=True)),
                ('declined_volenteers_by_host', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'challenge_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GifterFeedback',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('point', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gifter_feedback',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GiftergoalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_start_date', models.DateField(blank=True, null=True)),
                ('goal_end_date', models.DateField(blank=True, null=True)),
                ('goal_hours', models.IntegerField(blank=True, null=True)),
                ('goal_tasks', models.IntegerField(blank=True, null=True)),
                ('completed_hours', models.IntegerField(blank=True, null=True)),
                ('completed_tasks', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'giftergoal_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GiftUserType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activation_key', models.CharField(blank=True, max_length=45, null=True)),
                ('display_name', models.CharField(blank=True, max_length=200, null=True)),
                ('alias', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=45, null=True)),
                ('image', models.ImageField(blank=True, max_length=500, null=True, upload_to=b'')),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'gift_user_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HostFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'host_feedback',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HostUserType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('contact', models.CharField(blank=True, max_length=45, null=True)),
                ('website', models.CharField(blank=True, max_length=200, null=True)),
                ('activation_key', models.CharField(blank=True, max_length=45, null=True)),
                ('hometown', models.CharField(blank=True, max_length=60, null=True)),
                ('display_name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(upload_to=b'')),
                ('gender', models.CharField(blank=True, max_length=45, null=True)),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'host_user_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LocationType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('province', models.CharField(blank=True, max_length=50, null=True)),
                ('lattitude', models.CharField(blank=True, max_length=45, null=True)),
                ('longitude', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'location_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RankType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'rank_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatusType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'status_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserCategoryRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_category_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserCategoryRelCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_category_rel_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserChallengeCategoryLocationRelRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=b'')),
                ('photo1', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'user_challenge_category_location_rel_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserChallengeCategoryLocationRelRelCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_challenge_category_location_rel_rel_categorytype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserChallengeCategoryLocationRelRelLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_challenge_category_location_rel_rel_locationtype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserChallengeImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'user_challenge_category_location_rel_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserLocationRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_location_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRankingRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'user_ranking_rel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('contact', models.CharField(blank=True, max_length=45, null=True)),
                ('website', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.OneToOneField(db_column='user', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('activation_key', models.CharField(blank=True, max_length=45, null=True)),
                ('hometown', models.CharField(blank=True, max_length=60, null=True)),
                ('display_name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=b'')),
                ('gender', models.CharField(blank=True, max_length=45, null=True)),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('alias', models.CharField(blank=True, max_length=100, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('host_permission', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'user_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserType99',
            fields=[
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('contact', models.CharField(blank=True, max_length=45, null=True)),
                ('website', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.OneToOneField(db_column='user', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('activation_key', models.CharField(blank=True, max_length=45, null=True)),
                ('hometown', models.CharField(blank=True, max_length=60, null=True)),
                ('display_name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('image', models.CharField(blank=True, max_length=200, null=True)),
                ('gender', models.CharField(blank=True, max_length=45, null=True)),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('alias', models.CharField(blank=True, max_length=100, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('host_permission', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'user_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MyChallengeRelRel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_favourite', models.IntegerField(blank=True, null=True)),
                ('challenge_join_date', models.DateTimeField(default=datetime.datetime(2017, 1, 11, 8, 31, 31, 12000, tzinfo=utc))),
                ('status', models.ForeignKey(blank=True, db_column='status', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mygift.StatusType')),
                ('user', models.ForeignKey(blank=True, db_column='user', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mygift.AuthUserGroups')),
                ('user_challenge_category_location', models.ForeignKey(blank=True, db_column='user_challenge_category_location', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mygift.UserChallengeCategoryLocationRelRel')),
            ],
            options={
                'db_table': 'my_challenge_rel_rel',
                'managed': True,
            },
        ),
    ]
